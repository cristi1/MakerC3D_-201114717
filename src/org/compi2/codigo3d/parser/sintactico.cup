package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER, IGUAL, DIFERENTE, MAYOR, MENOR, MAYOR_IG, MENOR_IG, AND, OR, NOT;
nonterminal NodoC3D inicial, expresion, condicional, relacional;
nonterminal String oprel;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left MAYOR, MENOR, MAYOR_IG, MENOR_IG, IGUAL, DIFERENTE;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} condicional:exp 
                    {: 
                        RESULT = exp;
                        System.out.println("Etiquetas verdaderas: " + exp.getEtqV());
                        System.out.println("Etiquetas falsas: " + exp.getEtqF());
                        System.out.println("ultimo valor: " + exp.getCad());
                        ControlC3D.agregarC3D("ultimo valor: " + exp.getCad());
                    :};

condicional   ::= condicional:izq AND {:System.out.println(izq.getEtqV() + ":" + "\n");:} condicional:der
                    {:
                        String falsas = izq.getEtqF() + "," + der.getEtqF();
                        RESULT = new NodoC3D(der.getEtqV(),falsas,der.getCad()); 
                    :}
              |   condicional:izq OR {:System.out.println(izq.getEtqF() + ":" + "\n");:} condicional:der
                    {:
                        String verdaderas = izq.getEtqV() + "," + der.getEtqV();
                        RESULT = new NodoC3D(verdaderas, der.getEtqF(),der.getCad()); 
                    :}
              |   NOT condicional:unico
                    {:
                        RESULT = new NodoC3D(unico.getEtqF(),unico.getEtqV(),unico.getCad()); 
                    :}
              |   relacional:unico
                    {:
                        RESULT = unico;
                    :}
              ;

relacional   ::= expresion:izq oprel:op expresion:der
                    {:
                        String etqV = ControlC3D.generaEtiq();
                        String etqF = ControlC3D.generaEtiq();
                        String c3d = "if " + izq.getCad() + " " + op + " " +  der.getCad() + " then go to " + etqV + ";\n" + " go to " + etqF + ";\n";
                        System.out.println(c3d);
                        //ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etqV,etqF,der.getCad());
                    :}
             ;

oprel   ::= IGUAL
                {:
                    RESULT = "==";
                :}
        |   DIFERENTE
                {:
                    RESULT = "!=";
                :}
        |   MAYOR
                {:
                    RESULT = ">";
                :}
        |   MENOR
                {:
                    RESULT = "<";
                :}
        |   MAYOR_IG
                {:
                    RESULT = ">=";
                :}
        |   MENOR_IG 
                {:
                    RESULT = "<=";
                :}
        ;

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        System.out.println(c3d);
                        //ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        System.out.println(c3d);
                        //ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        System.out.println(c3d);
                        //ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        System.out.println(c3d);
                        //ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        System.out.println(c3d);
                        //ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        System.out.println(c3d);
                        //ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;